name: CI & Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend:
    name: Backend Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Install Render CLI
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          unzip render.zip
          sudo mv cli_v1.1.0 /usr/local/bin/render

      - name: Trigger deploy with Render CLI
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          CI: true
        run: |
          render deploys create ${{ secrets.RENDER_SERVICE_ID }} --output json --confirm

  # frontend:
  #   name: Frontend Build & Deploy
  #   runs-on: ubuntu-latest
  #   needs: backend
  #   defaults:
  #     run:
  #       working-directory: frontend

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 22

  #     - name: nextjs build cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.npm
  #           ${{ github.workspace }}/.next/cache
  #         # Generate a new cache whenever packages or source files change.
  #         key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
  #         # If source files changed but packages didn't, rebuild from a prior cache.
  #         restore-keys: |
  #           ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  #     - name: Install Dependencies
  #       run: npm ci

  #     - name: Run Lint
  #       run: npm run lint

  #     - name: Run test
  #       run: npm run test

  #     - name: Build Project
  #       run: npm run build

  #     - name: Install vercel cli
  #       run: npm i -g vercel

  #     - name: Deploy Frontend to Vercel
  #       run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
